IP - маршрутизированный протокол сетевого уровня TCP/IP.
отвечает за адресацию, задача — связывать друг с другом устройства и нарезать данные на пакеты для удобной отправки.
TCP/IP - cетевая модель передачи данных описывает передачу данных от источника к получателю.
набор протоколов для связи между компьютерами
Содержит 4 протокола на каждом этапе добавляется служебная информация к существующей
- Прикладной HTTP (передача текста с ссылками)
- Транспортный TCP(надежный, проверяет получение и последовательность всех данных) UDP(ненадежный, не проверяет получение и последовательность всех данных) 
- Сетевой IP (определение компьютера между локальными сетями)
- Канальный Ethernet, WLAN (разбиение/cборка по пакетам, кодирование данных)
HTTP - протокол передачи текста с ссылками в интернете
Request -> method, URI, version -> headers -> body
Response -> version, code, text -> headers -> body
типы headers:
general - для request, response запросов (Via - добавляет прокси) 
request - для request запросов (Referer URI ресурса, User-Agent - характеристики ПО клиента)
response - для response запросов (Allow - список методов ресурса, сервера)
entity - для request, response запросов (Content-Language - язык содержимого)
methods:
GET - используется для запроса содержимого ресурса, можно передавать параметры в url (idempotent)
POST - применяется для передачи данных ресурсу в теле запроса отличие от PUT по url производится обработка содержимого (not idempotent)
PUT - применяется для загрузки содержимого запроса, отличие от POST содержимое соответствует находящемуся ресурсу (idempotent)
PATCH - загрузки содержимого запроса но только фрагмент ресурса (not idempotent)
DELETE - удаляет указанный ресурс (idempotent)


ООП - парадигма(от греческого образец) программирования основанная на объектах. 
Основная идея представление программы в виде объектов которые являются экземплярами класса, которые образуют иерархию наследования. Объекты могут иметь состояние, которое можно изменить с помощью обмена сообщениями.
- Инкапсуляция сокрытие реализации, предоставляя доступ только к тому что необходимо при последующем использовании
- Наследование свойство системы описывающее новый класс на основе существующего с заимствующей функциональностью.
- Полиморфизм(от греческого много форм) свойство системы определение набора действий на основе интерефейса компилятором.


Типы данных
- Примитивные
целые (byte, short, int, long)
с плавающей точкой (float, double)
логические (boolean)
символьный (char)
- Ссылочные
класс, интерфейс, массив, String


ООП в java
инкапсуляция - модификаторы доступа (private, default, protected, public)
наследование - extends от класса
полиморфизм - метод с входным параметром abstract class, interface с существующими классами реализющими эти interface или abstract class


сlass (public, default) - структура данных с полями и методами
модификаторы доступа (private(class), default(package), protected(package, extends class), public)


inner class (private, default, protected, public), static
вложенный class - является объектом внешнего класса, применяется если объект внешнего и вложеного класса связаны
доступ к private внешнего сlass и внешний доступ к private вложеного, создание new A().new C();
static inner class - имеет доступ только к static полям внешнего class, создание new A.B();
конструктор с аргументами делает обязательным создание объекта с аргументами (если нет default конструктора)


abstract class если имеет хоть 1 abstract метод или просто abstract class без абстрактных методов
нельзя создать экземпляр, только анонимный класс(реализует abstract и interface методы)


interface - контракт описывающий обязательные методы


static/default блок инициализации
позволяют использовать методы внутри блока


enum - перечисления
(public, default), enum вложенный (private, default, protected, public)
enum может содержать переменные, конструкторы, методы, нельзя наследоваться (extends)
enum может представлен в виде цифр(ordinal) и строк(name)


records - записи
можно создать конструктор через вызов канонического и переопределить логику
переменные при создании в конструкторе final (нельзя изменить переменную из каконического конструктора)
переменные в record static 
не может быть abstract, extends


String (final, immutable)
в куче находится pool
можно создать 2 одинаковых строки в pool и не в pool - будут ссылаться на разные объекты в памяти
метод intern() - возвращает строку из pool если в нем уже содержится такая строка


регулярные выражения используются для фильтра строк
Pattern - cкомпилированное представление регулярного выражения, можно использовать для создания объекта Matcher
Matcher - механизм, выполняющий операции сопоставления с последовательностью символов по Pattern-у
matchs - пытается сопоставить всю входную последовательность с шаблоном.
LookingAt - пытается сопоставить входную последовательность, начиная с начала, с шаблоном.
find - сканирует входную последовательность в поисках следующей подпоследовательности, соответствующей шаблону.



Generics обобщение контейнеров - позволяют уйти от жесткого определения используемых типов
Generics могут быть class, interface, methods, constructors
может быть несколько универсальных параметров <T, E> 
PECS(Producer Extends Consumer Super) List<? extends Class3> - получить объекты суперклассов Сlass3,Сlass2(Class3 extends Class2, Class4 extends Class3) и т.д. 
Producer - предоставляет элементы
если хотим класс cуперкласс(Class3) положить в производный класс(Class4) нужно явно обозначить(cast) Class4 class4 = (Class4) Class3
Consumer - принимает элементы
List<? super Class3> - не можем положить в производный класс(Class4) в супер класс(Class3) - ошибка
List<? super Class3> - можем получить объект класса Object


Exceptions
иерархия
Throwable
Exception                                     Error
unchecked          checked                    unchecked
RuntimeException   IOException, SQLException  StackOverflowError
checked - обязательно нужно обрабатывать try - catch - (optional указывать) finnaly (выполняется всегда)
unchecked - не обязательно нужно обрабатывать


Lambda expressions
описывает реализацию принятого входного парамтера @FunctionalInterface
@FunctionalInterface - имеет только 1 нереализованный метод
может содержать static и default методы вместе с 1 нереализованным методом
Function  T  -> R
Predicate T  -> boolean
Consumer  T  -> ()
Supplier  () -> R
lambda -  @FunctionalInterface, this ccылается на внешний класс
anonymous class - abstract class, this ccылается на внутренний класс
anonymous class - захват не final переменных, реализация многих абстрактных методов, можем использовать в стримах
lambda - не захватывает не final переменные, более производительная, краткая запись



Method References
синтаксическое сокращение для Lambda expressions
сlassName::staticMethodName - static method
objClass::methodName - non static method
className::new - constructor
Type::methodName - non static method


Optional
тип-обертка для обработки null значений
isPresent() проверяет наличие значения внутри объекта Optional
имеет методы stream (map, filter, get...)


Сollections
Iterable - метод iterator() - возвращает Iterator для итерирования по коллекции (Collection extends Iterable)
List - упорядоченный, дублирование элементов, 
ArrayList - упорядоченный, структура данных массив
LinkedList - упорядоченный, структура связанный список
Set - неупорядоченный, уникальные элементы, нет метода get
HashSet - неупорядоченный, cодержит HashMap
LinkedHashSet - упорядоченный, cодержит LinkedHashMap
SortedSet - отсортированный, уникальные элементы
NavigableSet - SortedSet c методами навигации 
сeiling >= or null, floor <= or null, higher > or null, lower < or null и тд.
headSet < or empty, tailSet > or empty - возвращает часть элементов
Stack - LIFO extends Vector, synchronized methods 
push, pop(remove top), peek(not remove top), search(поиск элемента от хвоста)
Queue - FIFO, extends Collection
LinkedList, PriorityQueue(можно передать Comparator)
Comparator - функция сравнения порядка
Deque - вставка и удаление с обоих концов
ArrayDeque - структура данных массив addFirst, addLast, removeFirst, removeLast
Map - словарь ключ-значение, не содержит дубликатов ключей, ключ может быть null
HashMap - структура данных (массив bucket каждый - LinkedList), распределение в bucket по hash функции
ecли HashMap cодержит больше 8 элементов - для хранения используется red-black tree (быстрее поиск)
LinkedHashMap - упорядоченный HashMap
SortedMap - можно передать Comparator
NavigableMap - SortedMap c методами навигации похожие на NavigableSet по ключу(key)
TreeMap - реализация(NavigableMap) red-black tree (root - black, children - red)


Iterator - объект перебора по колекции, позволяет удалять элементы во время перебора hasNext(), next()
ListIterator - двунаправленная итерация hasPrevious(), previous(), nextIndex(), previousIndex()


Multithreding - метод достижения параллелизма путем запуска нескольких потоков.
Concurrency - несколько задач могут выполняться(запуск,завершение) в перекрывающиеся периоды времени, но не обязательно одновременно
Parallelism - несколько задач могут выполняться одновременно на разных процессорах или ядрах


Process - не могут использовать общую память, каждый Process в отдельной памяти, может содержать несколько threads
Thread - могут использовать общую память, использует ресурсы Process
extends Thread @Override run
implements Runnable @Override run
implements Callable @Override call
ExecutorService -> submit(Callable<T> task), invokeAll(Collection<Callable> tasks) -> Future<T> -> get()


Date - представляет конкретный момент времени с точностью до миллисекунды
методы:
getTime - получения времени в миллисекундах
before(date) - дата находится до даты
after(date) - дата находится после даты
toInstant - возвращает Instant (хранит время больше long)
Calendar - предоставляет методы для преобразования определенного момента времени, таких полей как YEAR, MONTH, DAY_OF_MONTH, HOUR, а также для управления полями календаря, например для получения даты до/после.
TimeZone - представляет собой смещение часового пояса, а также рассчитывает переход на летнее время, получение по String, ZoneId (time-zone ID)
Формирование дат
SimpleDateFormat(not synchronized) - класс для форматирования и анализа дат с учетом локали. Позволяет форматировать (дата → текст), парсинга (текст → дата) и нормализацию по паттерну.
DateTimeFormatter(thread-safe) - входной параметр в форматировании, и парсинге


JDBC (Java Database Connectivity) - cтандарт взаимодействия java приложений с СУБД. Позволяет получить соединение с БД по url. При загрузке библиотеки СУБД реализуется interface Driver и регистрируется в java приложении. DriverManager выбирает подходящую реализацию interface Driver и возвращает по нему Сonnection
Сonnection - соединение БД. Операторы SQL выполняются, и результаты возвращаются в контексте соединения.
Сonnection вызывает методы interface Statement - используемый для выполнения оператора SQL и возврата результатов. PreparedStatement - представляет предварительно скомпилированный оператор SQL.
CallableStatement - используется для выполнения sql процедур
DataSource - фабрика для соединения с физическим источником данных (существуют реализации hikariCP)
Statement возвращает interface ResultSet - таблица данных, представляющая набор результатов БД, поддерживает курсор, указывающий на текущую строку данных
Statement.RETURN_GENERATED_KEYS - указывающая, что сгенерированные ключи БД должны быть доступны для извлечения
executeUpdate() - возвращает int 1-обновление, 0-нет обновления
в Statement устанавливаем параметры для передачи в БД
executeQuery() - возвращает ResultSet, используя ResultSet извлекаем параметры из столбцов таблицы БД



SQL
типы данных:
- Целочисленные (SMALLINT, INTEGER, BIGINT, DECIMAL, SMALLSERIAL, SERIAL, BIGSERIAL)
- Строковые (CHAR(n), VARCHAR(n), TEXT)
- Даты и Времени (TIMESTAMP, DATE, TIME)
синтаксис:
SELECT <Столбец1>, <Столбец2>, ... <СтолбецN> - выбор столбца/ов
CASE WHEN <условие>
THEN <условие=истино> (описываем столбец вывода)
ELSE <условие!=истино> (описываем столбец вывода)
FROM <Имя_таблицы> - из таблицы
JOIN-ы  (Соединения дополнительных таблиц) - выбор столбца/ов из другой таблицы ON - предикат
WHERE <Условие/я отбора данных из таблицы> - фильтр OR(или) AND(и) 
GROUP BY <Признак группировки> 
HAVING <Условия отбора на основе данных группировки>
ORDER BY <Столбец1>, ... - сортировка по столбцам DESC (обратный порядок сортировки)
LIMIT <кол-во> ограничивает лимит выборки
OFFSET <кол-во> смещает выборку 
OFFSET, LIMIT можно менять местами
СRUD запросы:
create - cохранение объекта в БД
read - извелечение объекта или списка объектов 
update - обновление объекта
delete - удаление объекта 
