WS (WebSocket) - предназначенный для обмена сообщениями между браузером и веб-сервером, используя постоянное соединение, 
TCP отправка частями - WebSocket отправка полного сообщения


KISS(Keep it simple, stupid) - принцип проектирования, делать проще
DRY(Don't repeat yourself) - принцип проектирования, не повторять себя
YAGNI(You aren't gonna need it) - принцип проектирования отказ от избыточной функциональности
SOLID - принципов объектно-ориентированного проектирования
1)(Single responsibility)(принцип единственной ответственности) 1 class - 1 поручение 
2)(Open-closed)(принцип открытости-закрытости) код не изменяем а расширяем  (пример добавление интерфейса, при расширении реализуем контракт, закрыт для модификации открыт для расширения)
3)(Liskov substitution)(принцип подстановки Барбары Лисков)  использовать класс родитель или интерфейс вместо проверки типа данного класса (от общего метода вызывается конкретная реализации с определенного класса)
4)(Interface segregation)(принцип разделения интерфейса) использовать интерфейсы без лишних методов, если класс реализует интерфейс то все методы ему необходимы 
5)(Dependency inversion)(принцип инверсии зависиомстей) класс должен зависить от интерфейсов а не от реализаций 


Поисковые алгоритмы - решает задачи поиска, находит информацию хранящиюся в структуре данных
1)линейный - перебирает элементы последовательно
2)бинарный - для отсортированного, делим пополам сравниваем со средним до нахождения
3)в ширину - исследуем структуру итерируемся по узлам на всех ветках сразу на уровне
4)в глубину - исследуем структуру итерируемся по узлам одной ветки до последнего уровня
Сортировочные алгоритмы - алгоритм для упорядочивания элементов в списке
1)пузырька - проходит по массиву сравнивает пары элементов и меняет их местами если они не в правильном порядке
2)слияния - рекурсивно сортирует половины массива а затем комбинирует их в один
3)быстрая - выбирается опорный элемент все ключи меньше влева, больше вправо, затем рекурсивно приминяется к каждой из частей
Алгоритм Разделяй и Властвуй - рекурсивно делит на подзадачи, пока они не станут достаточно простыми для решения (быстрая, слияния)
Жадного алгоритм - принятии локально оптимальных решений на каждом этапе, допуская, что конечное решение также окажется оптимальным (Дейкстры)
Рекурсия - метод при котором решение зависит от решений более мелких экземпляров одной и той же задачи (быстрая сортировка)
Поиск с возвратом(Backtracking) - общий метод нахождения решений задачи, в которой требуется полный перебор всех возможных вариантов(в глубину и возврат к ближайщему верному пути)
Метод ветвей и границ - Алгоритм Разделяй и Властвуй разбиение на части, проверка содержит оптимальное решение или нет(задача о рюкзаке)
(если нижняя граница значений больше, чем верхняя граница, то нижняя может быть исключена)

JRE(Java Runtime Environment)(Среда времени выполнения Java) - минимальная реализация виртуальной машины для исполнения приложений. Состоит из JVM(исполняет байт-код из скомпилированного текста программы) и стандартного набора библиотек классов Java.
JDK(Java Development Kit) (Комплект разработки на Java) - JRE и набор инструментов разработчика приложений, включающий в себя компилятор Java(javac проверяется корректность программы), стандартные библиотеки классов Java, документацию и т.д.


Потоки-демоны - setDaemon(), помечает поток как демона/не демона, завершения работы когда все потоки, не демоны, завершаются, метод должен быть вызван до запуска потока
Статус демона потока всегда равен true и не может быть изменен этим методом на false после запуска потока
ThreadLocal - предоставляет локальные переменные потока, каждый поток, который обращается к ним (через метод get/set), имеет свою собственную, независимо инициализированную копию переменной
ThreadLocalRandom - Генератор случайных чисел, изолированный от текущего потока, использование ThreadLocalRandom вместо Random в параллельных программах приводит к меньшим накладным расходам и конфликтам
Коллекции в многопоточной среде - Synchronized Collections(блокировка на коллекции) может бросить ConcurrentModificationException(нужно синхронизироваться на объекте), Concurrent Collections(блокировка на сегменте колекции), compare-and-swap (CAS) - атомарная инструкция, в многопоточности для синхронизации, сравнивает если ссылка на значение отличается меняем значение
BlockingQueue - очередь, ожидающая пока очередь станет непустой при извлечении элемента, и ожидающие освобождения места в очереди при сохранении элемента, разными способами обработки операций
генерирует исключение - add, remove, element
возвращает boolean - offer,poll,peek
блокирует текущий поток пока операция нe завершиться успешно put, take
блокирует текущий поток на время - offer, poll
BlockingQueue не принимает null элементы
BlockingQueue может иметь ограниченную емкость
Реализации BlockingQueue являются потокобезопасными
методы организации очередей атомарные
ReentrantLock - блокировка монитора, но с расширенными возможностями Конструктор (optional fairness) true, отдает предпочтение потоку, ожидающему дольше всего (может снизить производительность но не будет голодания(starvation)- поток готов к работе, но поток с большим приоритетом не пропускает)
Condition - обеспечивает ожидание условия, атомарно снимает блокировку и приостанавливает текущий поток, (await, signal)
операции массовой коллекции addAll, containsAll, continueAll и RemoveAll не обязательно выполняются атомарно
ConcurrentMap - обеспечивающая потокобезбопасность и гарантии атомарности Segment extends ReentrantLock -> с сегмента записывает в bucket(Node)
ConcurrentNavigableMap - ConcurrentMap поддерживает операции NavigableMap


Reader - абстрактный класс для чтения потоков символов (read, skip, close)
Writer - абстрактный класс для записи в потоков символов(write, flush, close)
Serializable - интерфейс маркер классы, которые не реализуют этот интерфейс, не будут сериализовать/десериализовать свое состояние
Все подтипы сериализуемого класса сериализуемы
не имеет методов или полей и служит только для определения семантики сериализуемости
несериализуемые поля инициализированы с использованием конструктора без аргументов (самого нижнего) класса
private void writeObject(ObjectOutputStream out)
private void readObject(ObjectInputStream in)
Externalizable - writeExternal, readExternal позволяет добавить функционал в метод сереализации/десериализации
Если объект поддерживает externalizable, вызывается метод writeExternal иначе реализует Serializable, объект сохраняется с ObjectOutputStream


Сравнение NIO и IO - IO (потокоориентированный, cинхронный ввод/вывод), NIO (буфер-ориентированный, асинхронный ввод/вывод, Селекторы) NIO - много потоков, мало данных
Buffer - непотокобезопасен, линейная конечная последовательность элементов определенного примитивного типа
основные свойства:
capacity - количество содержащихся элементов
limit - индекс первого элемента, который не следует читать или записывать
position - индекс следующего элемента, который будет прочитан или записан
каждый буфер доступен для чтения, но не каждый буфер доступен для записи  isReadOnly - проверить доступ буфера, buffer.asReadOnlyBuffer() - обертка для ReadOnly
Channel - cвязующее звено для операций ввода-вывода, предназначены для обеспечения безопасности многопоточного доступа, cостоит из Buffer-ов, 
open/close, проверить вызвав его метод isOpen
Selector - создать, вызвав Selector.open() регистрируется в реализации SelectableChannel которая возвращает SelectionKey - токен, к которому можно прикрепить объект
Pipe - однонаправленный канал, состоит из записываемого приемника и читаемого исходного канала (передача данных между Channel-ами в потоках) (sink()-канал записи, source()-канал чтения) в том же порядке записываются и читаются


JAX-RS - спецификация Java при создании веб-сервисов для REST (@GET, @POST, @Path, @PathParam, @ApplicationPath, @Produces(MediaType.APPLICATION_JSON)) extends Application для базового url, аналогия Spring(@Get/PostMapping, @RequestMapping)
JAX-WS - интерфейс для создания веб-служб, SOAP (спецификация XML для отправки сообщений по сети)
WSDL(Web Services Description Language) - язык описания веб-сервисов на XML
wsimport - утилита генерирует java интерфейсы из WSDL { @WebServiceClient, @WebEndpoint(обращение к методам @WebService)
@WebService - помечает класс как реализацию/интерфейс веб-службы
@WebMethod - настраивает метод, который предоставляется как операция веб-службы. Связанный метод должен быть общедоступным
@WebResult - настраивает сопоставление возвращаемого значения с частью WSDL и элементом XML }
WebSocket API - предоставляет услугу для открытия сеанса двусторонней интерактивной связи между клиентом и сервером через TCP
@ClientEndpoint - является клиентом веб-сокета, может иметь методы жизненного цикла веб-сокета
@ServerEndpoint - позволяет разработчику определить URL который будет опубликован Endpoint-ом, развернут и доступен в URI сервера веб-сокетов (URI сервера содержит URL Endpoint)
@OnOpen - метод, который вызываться при открытии нового сеанса веб-сокета
@OnMessage - метод получает входящие сообщения веб-сокета, Endpoint может иметь только 1 метод @OnMessage
@OnClose - метод, вызывается при закрытии сеанса веб-сокета


Hibernate - библиотека для ORM(Object Relational Mapping)
Session - цель операции создания, чтения и удаления для экземпляров классов сущностей. может находиться в 1-ом из 3-х состояний относительно сеанса:
transient: никогда не бывает persistent и не связан с сеансом,
persistent: в настоящее время связан с сеансом
detached: ранее persistent, но в настоящее время не связанный с сеансом.
Цикл сеанса ограничен началом и окончанием транзакции
экземпляр Session связан c одним открытым сеансом.
SessionFactory - потокобезопасная, получать новый экземпляр Session от фабрики каждый раз, когда она обслуживает запрос клиента
Transaction - не является потокобезопасным, связана с сеансом и начинается с session.getTransaction().begin() и заканчивается вызовом commit/rollback()
В рамках сессии может быть много транзакций, но незафиксированной только одна
Spring AOP - модуль для аспектно ориентированного программирования, разбивает логику программы на отдельные части, управляет прокси оберткой для @Bean
используется для реализации сквозной функциональности которая не может быть отделена от остальной части приложения
для добавляния сквозной функциональности используется модуляризация - метод разделения сложных систем на мелкие части
@Aspect - класс описывается обработка AOP
@Pointcut - точка сработки AOP
@Before - выполнится до метода 
@AfterReturning - после метода с возвращаемым объектом
@Around - после метода с возвращаемым объектом, можно подставить свою логику до и после вызова метода
Spring Transaction - механизм управления транзакциями
@Transaction(read only) - insert, update, delete - бросает исключение, может повысить производительность транзакции чтения
Dirty Checking - механизм, Hibernate для определения, изменилось ли значение объекта с момента его получения из БД (работает только в транзакции)
Spring Security - механизмы построения систем аутентификации и авторизации
@EnableMethodSecurity - Определяет, следует ли включить аннотации PreAuthorize, PostAuthorize, PreFilter и PostFilter Spring Security 
- Нет Roles но есть @EnableMethodSecurity 403 по всем запросам с аунтефикацией
- Есть Roles но нет @EnableMethodSecurity доступ на любые роли по всем запросам с аунтефикацией
@Bean SecurityFilterChain - Определяет цепочку фильтров, которую можно сопоставить с HttpServletRequest. чтобы решить, применимо ли это к этому запросу
interface UserDetailsService - Основной интерфейс, который загружает пользовательские данные, loadUserByUsername
interface UserDetails - предоставляет основную информацию о пользователе, getPassword, getUsername, getAuthorities
DaoAuthenticationProvider - извлекает сведения о пользователе из UserDetailsService.
interface GrantedAuthority - Представляет полномочия, предоставленные объекту Authentication, SimpleGrantedAuthority
Authentication - представляет токен для запроса проверки подлинности участника, UsernamePasswordAuthenticationToken
@AuthenticationPrincipal - возвращает модель UserDetails
@PreAuthorize - контроль доступа к методу, разрешен вызов метода или нет



Apache Http - позволяет получать и отправлять данные по http запросу (HttpGet, HttpPost, CloseableHttpClient-client, client.execute-response)
реализация всех методов HTTP
- Доступ к коду ответа и заголовкам, отправленным сервером
Apache Commons - библиотека java утилит(программа, облегчающая пользование программами) StringUtils(isBlank, join) FileUtils(readFileToString, writeStringToFile), deleteDirectory
Apache Log4j, Log4j2 -log4j.properties настройки вывода логов, в файл на консоль, паттерн вывода, дата время, имя лога
ConsoleAppender - консоль
RollingFileAppender - файл
<appender> - класс вывода
<layout> - PatternLayout
<param> - name=ConversionPattern value=паттерн вывода дата-время
DOMConfigurator - класс для инициализации среды log4j с использованием DOM(Document Object Model) 


View(SQL) Разновидность и разница - фильтр на доступ к таблице является результатом выполнения запроса
CREATE [OR REPLACE/TEMP/RECURSIVE] VIEW view_name[(column/table)] AS SELECT * FROM table_name WHERE
OR REPLACE - в случае существования старое будет удалено, а новое создано
TEMP - автоматически удалится в конце сессии
RECURSIVE - рекурсивное представление
WITH CHECK OPTION - строки будут проверяться на соответствие при вствке во View по определению WHERE при несоответствии данное изменение не будет выполнено(ошибка)
Роли в SQL - пользователь БД, могут владеть объектами БД, (назначать привилегии) - доступ и действия над объектами
CREATE/ALTER/DROP ROLE <role> WITH <options> (SUPERUSER/NOSUPERUSER), LOGIN, PASSWORD
