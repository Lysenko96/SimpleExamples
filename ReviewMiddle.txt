TLS (Transport Layer Security) - Протокол защиты транспортного уровня, обеспечивающий защищённую передачу данных
SFTP (Secure File Transfer Protocol) - протокол передачи файлов по SSH, использует защищенное подключение
WSS (WebSockets Secure)- протокол для обмена данными между сервером и браузером с использованием безопасного соединения
HTTPS (HyperText Transfer Protocol Secure) - расширение протокола HTTP для поддержки шифрования в целях повышения безопасности (443 port)


Знание основных паттернов рефакторинга
Порождающие - создание новых объектов(Factory method, Abstract Factory, Builder, Prototype, Singleton)
Структурные - построение удобных в поддержке иерархий классов(Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy)
Поведенческие - эффективное и безопасное взаимодействия между объектами(Chain of Responsibility, Command, Iterator, Mediator, Memento, Observer, State, Strategy, Template, Visitor)


Big-O нотации
описывают временную сложность алгоритмов


Базовое понимание JVM(Java Virtual Machine) - это механизм, предоставляющий среду выполнения для управления приложениями(Java). Виртуальная машина является независимой оболочкой исполнения кода, благодаря этому возможен запуск на любой ОС. JVM работает c примитивными (primitive) и ссылочными (reference) типами данных
При запуске JVM, используются три загрузчика классов:
они выполняют: Загрузка, Связывание(выделение памяти), Инициализация
Bootstrap class loader (Загрузчик класса Bootstrap) - основные библиотеки Java <JAVA_HOME>/jre/lib
Extensions class loader (Загрузчик класса расширений) -  загружает код в каталоги расширений <JAVA_HOME>/jre/lib/ext
System class loader (Системный загрузчик классов) - загружает код, найденный в java.class.path, который сопоставляется с переменной среды CLASSPATH
Области данных
для одного потока, существует один PCR(pc Register), который создается при запуске потока. PCR хранит адрес выполняемой сейчас инструкции JVM
JVM Stacks
Каждый поток в JVM имеет собственный стек, созданный одновременно с потоком. Стек в JVM хранит frames
Heap - которая используется всеми потоками JVM. Куча - это область данных времени выполнения, из которой выделяется память для всех экземпляров и массивов классов
Frames 
Frame используется для хранения данных и частичных результатов, а также для выполнения динамического связывания, возврата значений для методов и отправки исключений. Новый frame создается каждый раз, когда вызывается метод. Frame уничтожается, когда завершается вызов метода. Каждый frame имеет свой собственный массив локальных переменных, свой собственный стек операндов и ссылку на пул констант во время выполнения класса текущего метода.
Базовое понимание GC(Garbage Collector)
Автоматический процесс восстановления заполненной памяти JRE путем уничтожения неиспользуемых объектов
Сборщик мусора находит неиспользуемые объекты(без ссылок) и удаляет их, чтобы освободить память
Чем больше событий сборки мусора переживает объект, тем дальше он продвигается в куче. Он начинает в молодом поколении и в конечном итоге заканчивает в штатном поколении
Mark - пометка живых и мертвых объектов
Sweep(подметать) - зачистка мертвых объектов
Compact - уплотнение памяти (располажение в непрерывном блоке в начале кучи)
Young generation(Eden Space, FromSpace, ToSpace)
Old Generation
Модули в Java
Модуль - группа объединенных пакетов 
exports packages - добавить группу пакетов в модуль
requires name_module - добавить модуль в другой модуль 



1. Понятие Executors.
Фабричные и служебные методы для классов 
Executor - интерфейс, выполняющий отправленные задачи Runnable, execute(Runnable r), упращается создание потока execute(Runnable r)-(r) -> new Thread(r).start()
ExecutorService - интерфейс, предоставляющий методы для завершения задач(shutdown/Now) и методы создания Future для отслеживания хода выполнения задач. Метод submit расширяет базовый метод Executor execute(Runnable), создавая и возвращая Future. Cодержит блокирующую очередь, в которую помещаются задачи (class ThreadPoolExecutor)
ScheduledExecutorService - интерфейс extends ExecutorService, может планировать запуск команд после заданной задержки или периодическое выполнение
ThreadFactory - интерфейс создает новые потоки по требованию Thread newThread(Runnable r)
Callable - задача, которая возвращает результат и может вызвать исключение  V call() throws Exception;
2. Понятие Thread Pools.
Создание и уничтожение потока - дорогостоящий процесс по времени
Thread Pools - преимуществ пула потоков по сравнению с созданием нового потока для каждой задачи является то, что затраты на создание и уничтожение потоков ограничиваются первоначальным созданием пула, что может привести к повышению производительности.
3. Класс Future - результат асинхронных вычислений, предоставляются методы для проверки, ожидания завершения и получения результата вычисления, получить с помощью метода get(), отмена осуществляется методом cancel()
Класс FutureTask — это реализация Future, которая реализует Runnable и поэтому может выполняться в Executor, может принимать Сallable, FutureTask(Сallable c)



Архитектура криптографии в Java(JCA)



Навыки работы с JConsole или VisualVM



Уверенное знание JNDI API
Context - интерфейс представляет контекст имен, состоит из имен и связанных с ним объектов, содержит методы
bind(Name name, Object obj) - связывает по имени(строке) объект
unbind(Name name) - отвязывает объект от имени(строки)
lookup(Name name) - извлекает по имени(строке) объект
InitialContext - запускающий контекст для выполнения операция с именами
Name - интерфейс общее имя, упорядоченная последовательность компонентов
CompositeName - класс представляет составное имя, последовательность компонентов охватывающая множество пространств имен для объектов
в <GlobalNamingResources> добавляем <Resource name=resource_name> server.xml
в <Context> добавляем <ResourceLink name=resource_name> context.xml
Уверенное знание JavaMail API
MIME(Multipurpose Internet Mail Extensions) - многоцелевые расширения интернет-почты
Session - представляет mail сессию не подкласс, собирает вместе properties, defaults используемые mail API
Authenticator - представляет объект который знает как получить аутентификацию для подлючения к сети
PasswordAuthentication - держит данные для Authenticator, простой репозиторий username, password
MimeMessage - класс представляет MIME стиль email сообщения реализация MimePart атрибуты для сообщения
Part - интерфейс состоит из набора атрибутов и контента для сообщений
MimeBodyPart - представляет MIME для части тела сообщения
MimeMultipart - все подтипы(текст, файл) составных данных MIME отображаются как объекты MimeMultipart
FileDataSource - предаставялет услуги через FileTypeMap(возвращает контент тип по файлу)
DataHandler - управляет преобразованием потока в строку, обеспечивает доступ к командам(для настройки MIME), которые могут работать с данными
В Multipart устанваливаем BodyPart(файл, текст)
В Message устанавливаем Session, Multipart и отправляем



Уверенное знание Spring Messaging
JavaMailSenderImpl - реализация интерфейса JavaMailSender, конфигурируем бин пропертями для почты
JavaMailSender - поддерживающий сообщения MIME, используется вместе с классом MimeMessageHelper для удобного создания JavaMail MimeMessages, включая вложения(файлы)
MimeMessageHelper - Helper класс для заполнения MimeMessage, с добавленной поддержкой для отправки текста картинок и файлов MimeMessageHelper(MimeMessage msg, boolean multipart) - multipart(true) для отправки нескольких MIME(текст, файл) 
Spring Integration



Навыки работы с JWT
Навыки работы с Apache Tomcat






